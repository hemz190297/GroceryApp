import java.security.MessageDigest

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'com.google.gms.google-services'
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.awesomeproject"
    defaultConfig {
        applicationId "com.awesomeproject"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('release.keystore.jks')
            storePassword 'moulimohann123'
            keyAlias 'mouliAlias'
            keyPassword 'moulimohann123'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            crunchPngs false // change to true to optimize pngs
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

// Dynamically create tasks for each variant
android.applicationVariants.all { variant ->
    def variantName = variant.name // e.g., debug, release

    task "hashAppManifest${variantName.capitalize()}" {
        group = "verification" // Optional: Group in Gradle task list
        description = "Compute hash for AndroidManifest.xml for ${variantName} variant"

        doLast {
            def apkPath = "${buildDir}/outputs/apk/${variantName}/app-${variantName}.apk"
            // Replace with your APK path
            def outputDir = file("${buildDir}/outputs/extracted_manifest")
            outputDir.mkdirs()

            def manifestFile = new File(outputDir, "AndroidManifest.xml")
            def apkFile = file(apkPath)

            if (!apkFile.exists()) {
                throw new GradleException("APK file not found at: ${apkPath}")
            }

            println("APK found at: ${apkPath}")

            // Extract the binary AndroidManifest.xml from the APK
            ant.unzip(src: apkPath, dest: outputDir) {
                patternset {
                    include(name: "AndroidManifest.xml")
                }
            }

            if (manifestFile.exists()) {
                // Compute the hash of the binary file
                def digest = MessageDigest.getInstance("SHA-256")
                manifestFile.withInputStream { input ->
                    byte[] buffer = new byte[8192]
                    int bytesRead
                    while ((bytesRead = input.read(buffer)) != -1) {
                        digest.update(buffer, 0, bytesRead)
                    }
                }
                def manifestHash = digest.digest().collect { String.format("%02x", it) }.join("")
                println("Binary AndroidManifest.xml Hash: ${manifestHash}")

                // Optionally save the hash to a file
                def hashFile = new File(outputDir, "manifest_hash.txt")
                hashFile.text = manifestHash
                println("Hash saved to ${hashFile.path}")
            } else {
                println("Binary AndroidManifest.xml not found in the APK.")
            }
        }
    }

    // Optionally, run this task after the variant is assembled
    tasks["assemble${variantName.capitalize()}"].finalizedBy("hashAppManifest${variantName.capitalize()}")
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation(platform("com.google.firebase:firebase-bom:33.7.0"))
    implementation("com.google.firebase:firebase-analytics")
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation project(':react-native-async-storage_async-storage')
    
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    implementation "androidx.multidex:multidex:2.0.1"
}

//apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
